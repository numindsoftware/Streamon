using Streamon.Memory;
using Streamon.Tests.Fixtures;

namespace Streamon.Tests;

public class InMemoryStreamStoreTests
{
    [Fact]
    public async Task CorrectlyAppendsNewEvents()
    {
        MemoryEventStore eventStore = new();

        StreamId streamId = new("order-123");
        IEnumerable<object> events = [new OrderCaptured("1"), new OrderConfirmed("1")];

        var stream = await eventStore.AppendAsync(streamId, StreamPosition.Start, events);

        Assert.NotEmpty(stream);
        Assert.NotEqual(stream.First().EventId, default);
        Assert.Equal(stream.GlobalPosition, stream.CurrentPosition);


        // Stream:
        // stream-id will be provided, must be unique, this will be enforced by the db subsystem, to enforce uniqueness, a type can be provided as a helper method in new StreamId<T>()

        // Event:
        // event-id will be autogenerated, should always be incremental, NOT controlled by client
        // event-type: calculated based on the event type, dotnet type and using json serialization
        // etag: uses the event sequence/version for event records



        // Metadata:
        // correlation-id will be provided by client, saved as metadata
        // causation-id will be provided by client, saved as metadata


    }
}

